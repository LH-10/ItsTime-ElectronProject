import { app, BrowserWindow ,Notification,Tray,Menu} from 'electron';
import path from 'path';
import { pollResource } from './resourceManager';
import { db, initDb } from './database/sqldb';
import { timeDataIPC } from './ipc/timers/timersDataIpc';
import { handleIpcRegistration } from './ipc/ipc_register';
const Database = require('better-sqlite3');

app.setAppUserModelId('Its Time');



// type SubMenu={
//     label:string,
//     click:()=>void
//   }
  
//   type Menu={
//       label:string,
//       submenu:SubMenu[],
    
//     }[]
    
    // This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
    // plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
    // whether you're running in development or production).
    declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
    declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


    function hideAppToTray(mainWindow:BrowserWindow){
      let willClose=false;

        mainWindow.on('close', (event) => {
        if(willClose){
          return 
        }
      event.preventDefault(); // Stop the app from quitting
      mainWindow.hide();      
        if(app.dock){
          app.dock.hide()
        }
      });
      let tray = new Tray(!isDev?path.join(process.resourcesPath,'app-assets','appicon.png'):path.join('./src','app-assets','appicon.png'));
    
      const contextMenu = Menu.buildFromTemplate([
        { label: 'Show App', click: () => mainWindow.show() },
        { label: 'Quit', click: () => {  app.quit(); } }
        ]);
      
      tray.setToolTip('Its Time');
      tray.setContextMenu(contextMenu);
      app.on("before-quit",()=>{
        willClose=true
      })
    }

    
const isDev=process.env.NODE_ENV!=='production'
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 610,
    minHeight:500,
    minWidth:680,
    width: 860,
    autoHideMenuBar:!isDev,
    webPreferences: {
    
       devTools:isDev,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  
  if(!isDev){
    const appMenu=Menu.buildFromTemplate([])
    Menu.setApplicationMenu(appMenu)
  }

  hideAppToTray(mainWindow)
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  console.log("Hello")
  initDb();
  pollResource(mainWindow)
 
  try{
    db.exec(`
      CREATE TABLE IF NOT EXISTS timers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT,
        message TEXT,
        seconds INTEGER
        )
        `);
      }
      catch(err){
        console.log(err)
      }

  handleIpcRegistration();

};


app.on('ready', createWindow);


app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

