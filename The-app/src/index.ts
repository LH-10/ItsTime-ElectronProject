import { app, BrowserWindow ,Notification} from 'electron';
import path from 'path';
import { pollResource } from './resourceManager';
const Database = require('better-sqlite3');

const notificationIPC =require("./ipc/notificationIpc")
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

// type SubMenu={
//   label:string,
//   click:()=>void
// }

// type Menu={
//   label:string,
//   submenu:SubMenu[],

// }[]

declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const isDev=process.env.NODE_ENV!=='production'
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    minHeight:450,
    minWidth:600,
    width: 800,
    webPreferences: {
       devTools:isDev,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  console.log("Hello")
  console.log("helq")
  pollResource(mainWindow)
  // const dbPath = path.join(app.getPath('userData'), 'test.db');
  // const db = new Database(dbPath);



  // const row = db.prepare('SELECT * FROM test ORDER BY id DESC LIMIT 1').get();
  // console.log('ðŸ§ª better-sqlite3 working:', row);
  //  db.exec(`
  //   CREATE TABLE IF NOT EXISTS notes (
  //     id INTEGER PRIMARY KEY,
  //     content TEXT
  //   )
  // `);
  notificationIPC()
  //   const notification = new Notification({
  //   title: 'Custom Notification',
  //   body: 'Click Dismiss to close this notification.',
  //   actions: [{ type: 'button', text: 'Dismiss' }]
  // });


  // Open the DevTools.
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
